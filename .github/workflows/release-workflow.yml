# Repo settings Actions permissions: Allow all actions and reusable workflows
# Create a Personal Access Token (PAT) with the following permissions: repo, workflow, read:org
# Add the PAT as a secret in the repository with the name AUTH_PAT

name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit hash for the release branch (optional)'
        required: false
      github_account:
        description: 'GitHub account name'
        required: true
        default: 'apptegy'
      repo_name:
        description: 'Repository name'
        required: true
        default: 'auth-service'
      base_branch:
        description: 'Base branch to change log from'
        required: true
        default: 'master'
      develop_branch:
        description: 'Develop branch to merge to generate the release branch'
        required: true
        default: 'develop'
      release_branch:
        description: 'Release branch to create'
        required: false
        default: 'release'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Git
      run: |
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git config user.name "${{ github.actor }}"
        git config credential.helper 'store --file=.git-credentials'
        echo "https://${{ secrets.GITHUB_TOKEN }}@github.com" > .git-credentials
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete existing 'release' branch on remote
      run: gh repo delete-branch ${{ inputs.github_account }}/${{ inputs.release_branch }} || echo "Branch does not exist on remote"
      env:
        GH_TOKEN: ${{ secrets.CFA_PAT }}

    - name: Phase 1 - Create Release Branch
      id: phase1
      run: |
        gh repo clone ${{ inputs.github_account }}/${{ inputs.repo_name }} workspace/${{ inputs.repo_name }}
        cd workspace/${{ inputs.repo_name }}

        commit_hash=${{ inputs.commit_hash }}
        git fetch && git checkout ${{ inputs.DEVELOP_BRANCH }}
        git pull origin ${{ inputs.DEVELOP_BRANCH }}
        git checkout -b ${{ inputs.RELEASE_BRANCH }}

        if [ -n "$commit_hash" ]; then
          git reset --hard $commit_hash
        fi

        git push -u origin ${{ inputs.RELEASE_BRANCH }} --force
      env:
        GH_TOKEN: ${{ secrets.CFA_PAT }}

    - name: Phase 2 - Change Log
      run: |
        # Clone clog repository
        gh repo clone apptegy/clog


        # Build the Docker image
        docker build clog -t 124252578199.dkr.ecr.us-east-2.amazonaws.com/clog:latest

        # Example usage of clog without the removed line
        docker run --rm -i 124252578199.dkr.ecr.us-east-2.amazonaws.com/clog:latest -a ${{ env.GH_TOKEN }} -r ${{ inputs.github_account }}/${{ inputs.repo_name }} -f release -t ${{ inputs.BASE_BRANCH }} > changelog.txt
      env:
        GH_TOKEN: ${{ secrets.CFA_PAT }}

    - name: Phase 3 - Release Pull Request
      run: |
        cd workspace/${{ inputs.repo_name }}

        # Create a pull request using GitHub CLI
        pr_title=$(head -n 1 changelog.txt)
        pr_body=$(cat changelog.txt)
        gh pr create --base ${{ inputs.BASE_BRANCH }} --head ${{ inputs.RELEASE_BRANCH }} --title "$pr_title" --body "$pr_body"
      env:
        GH_TOKEN: ${{ secrets.CFA_PAT }}
